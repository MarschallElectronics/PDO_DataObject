{
    "name": "config",
    "parent": "",
    "title": "",
    "permname": "",
    "modOrder": "001",
    "items": [
        {
            "name": "config",
            "purpose": " Set\/get the global configuration...",
            "stype": "function",
            "|xns": "Roo.doc",
            "xtype": "Entry",
            "items": [
                {
                    "name": "config",
                    "is_static": true,
                    "memberof": "PDO_DataObject",
                    "returndesc": "the current config..",
                    "returntype": "-",
                    "|xns": "Roo.doc",
                    "xtype": "Synopsis",
                    "items": [
                        {
                            "desc": "key\/value",
                            "is_optional": false,
                            "name": "$cfg_in",
                            "type": "array",
                            "|xns": "Roo.doc",
                            "xtype": "Param"
                        },
                        {
                            "desc": "value",
                            "is_optional": false,
                            "name": "$value",
                            "type": "mixed",
                            "|xns": "Roo.doc",
                            "xtype": "Param"
                        }
                    ]
                },
                {
                    "stype": "desc",
                    "|xns": "Roo.doc",
                    "xtype": "Section",
                    "items": [
                        {
                            "html": " Used to be via PEAR::getStaticProperty() - now removed\n\n Usage:\n\n Fetch the current config.\n $cfg = PDO_DataObject::config(); \n\n SET a configuration value. (returns old value.)\n $old = PDO_DataObject::config('schema_location', '');  \n\n GET a specific value ** does not do this directly to stop errors...\n somevar = PDO_DataObject::config()['schema_location'];  \n\n SET multiple values (returns 'old' configuration)\n $old_array = PDO_DataObject::config( array( 'schema_location' => '' ));\n\n\n\n\n # Configuration Options:\n\n ### Connection related\n\n | Option | Type | Default | Description |\n | --- | --- | --- | ---  |\n | database |  string or boolean | false |  <span>the default database dsn (not PDO standard = see #$_database for details) \\\n                                             it's similar format to PEAR::DB.. <\/span> |\n | databases | array | array() |  map of database nick-names to connection dsn's\n | tables |  array | array() |  map of tables names to database 'nick-names'\n\n ### Schema location\n \n | Option | Type | Default | Description |\n | --- | --- | --- | ---  |\n |  schema_location  | mixed| false | \\\n                 unless you are using 'proxy' then schema_location is required.\n |   | string |   | directory, or list of directories (with path Seperator..) \\\n                  eg. if your database schema is in \/var\/www\/mysite\/Myproejct\/DataObject\/mydb.ini <BR\/>\\\n                  then schema_location = \/var\/www\/mysite\/Myproejct\/DataObject\/ <BR\/>\\\n   you can use path seperator if there are multiple paths. and combined  |\n |   | array |    |   map of database names to exact location(s).  <BR\/>\\\n                         eg.  <BR\/>\\\n                             mydb => \/var\/www\/mysite\/Myproejct\/DataObject\/mydb.ini  <BR\/>\\\n                           value can be an array of absolute paths, or PATH_SEPERATED  <BR\/> |\n             \n                 \n     \n         \/\/ class - factory + load derived classes\n             'class_prefix' => 'DataObjects_',\n                 \/\/ Prefix Mapping of table name to PHP Class\n                 \/\/    to use multiple prefixes seperate them with PATH_SEPERATOR\n                 \/\/    for 'loading' it will try them all in sequence.. - first found wins.\n                 \/\/    for the generator it will only use the first..\n \n             'class_location' => '',\n                 \/\/ directory where the Table classes are..\n                 \/\/ you can also use the format\n                 \/\/ \/home\/me\/Projects\/myapplication\/DataObjects_%s.php  (%s==table)\n                 \/\/ \/home\/me\/Projects\/myapplication\/DataObjects_%2$s%1$s.php  (%1$s==table) (%2$s==database nickname)\n                 \/\/ and %s gets replaced with the tablename.\n                 \/\/ to use multiple search paths use the PATH_SEPERATOR\n \n             \n             'proxy' => false,\n                 \/\/ NOT RECOMMENDED - it's very slow!!!!\n                 \/\/ normally we use pre-created 'ini' files, but if you use proxy, it will generate the\n                 \/\/ the database schema on the fly..\n                 \/\/ true - calls PDO_DataObject_Generator-> ???\n                 \/\/ full - generates dataobjects when you call factory...\n                 \/\/ YourClass::somemethod... --- calls some other method to generate proxy..\n             \n             \n             \n             'portability' => 0,\n                 \/\/ similar to DB's portability setting,\n                 \/\/ currently it only lowercases the tablename when you call tableName(), and\n                 \/\/ flatten's ini files ..\n             \n             'transactions' => true,\n                 \/\/ some databases, like sqlite do not support transactions, so if you have code that\n                 \/\/ uses transactions, and you want DataObjects to ignore the BEGIN\/COMMIT\/ROLLBACK etc..\n                 \/\/ then set this to false, otherwise you will get errors.\n \n             'quote_identifiers' => false,\n                 \/\/ Quote table and column names when building queries \n  \n             'enable_null_strings' => false,\n                 \/\/ This is only for BC support - \n                 \/\/ previously you could use 'null' as a string to represent a NULL, or even null \n                 \/\/ however this behaviour is very problematic.\n                 \/\/ \n                 \/\/ if you want or needto use NULL in your database:\n                 \/\/ use PDO_DataObject::sqlValue('NULL');\n \n \t\t            \/\/ BC - not recommended for new code...\n                 \/\/ values true  means  'NULL' as a string is supported      \n                 \/\/ values 'full' means both 'NULL' and guessing with isset() is supported\n                 \n                 \n         \/\/  NEW ------------   peformance \n              \n             'fetch_into' => false,\n                 \/\/ use PDO's fetch_INTO for performance... - not sure what other effects this may have..\n             \n             \/\/ -----   behavior\n  \n                 \n             'debug' => 0,\n                 \/\/ debuging - only relivant on initialization - modifying it after, may be ignored.\n                 \n             'PDO' => 'PDO',  \n                 \/\/ what class to use as PDO - we use PDO_Dummy for the unittests\n \n      \n        \n     \n     \n",
                            "|xns": "Roo.doc",
                            "xtype": "Para"
                        }
                    ]
                },
                {
                    "stype": "parameter",
                    "|xns": "Roo.doc",
                    "xtype": "Section"
                },
                {
                    "stype": "return",
                    "|xns": "Roo.doc",
                    "xtype": "Section"
                },
                {
                    "stype": "example",
                    "|xns": "Roo.doc",
                    "xtype": "Section"
                }
            ]
        }
    ]
}